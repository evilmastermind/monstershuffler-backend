generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model actionsdetails {
  objectid   Int     @id
  name       String  @db.VarChar(255)
  actiontype String  @db.VarChar(255)
  subtype    String? @db.VarChar(255)
  source     String  @db.VarChar(255)
  objects    objects @relation(fields: [objectid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model actionstags {
  objectid Int
  tag      String  @db.VarChar(255)
  objects  objects @relation(fields: [objectid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([objectid, tag])
}

model bases {
  id    Int    @unique(map: "bases_id_idx") @default(autoincrement())
  age   String @db.VarChar(255)
  part  String @db.VarChar(255)
  value String @db.VarChar(255)
}

model charactersdetails {
  objectid    Int     @id
  name        String  @db.VarChar(255)
  monstertype Int
  cr          Float   @db.Real
  alignment   Int
  size        Int
  meta        String
  objects     objects @relation(fields: [objectid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([objectid])
}

model classesdetails {
  objectid    Int     @id
  name        String  @db.VarChar(255)
  femalename  String  @db.VarChar(255)
  age         String  @db.VarChar(255)
  description String?
  objects     objects @relation(fields: [objectid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model damagetypes {
  id          Int     @id @default(autoincrement())
  userid      Int
  name        String  @db.VarChar(255)
  description String?
  users       users   @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userid])
}

model folders {
  id            Int       @id @default(autoincrement())
  userid        Int
  created       DateTime? @default(now()) @db.Timestamp(6)
  lastedited    DateTime? @default(now()) @db.Timestamp(6)
  folderid      Int?
  name          String    @db.VarChar(255)
  trashed       Int?      @default(0) @db.SmallInt
  folders       folders?  @relation("foldersTofolders", fields: [folderid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_folders folders[] @relation("foldersTofolders")
  users         users     @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  objects       objects[]

  @@index([folderid])
  @@index([userid])
}

model game {
  game                     Int      @id
  name                     String   @db.VarChar(255)
  skills_skills_gameTogame skills[] @relation("skills_gameTogame")
}

model languages {
  id     Int     @id @default(autoincrement())
  userid Int
  name   String  @db.VarChar(255)
  script String? @db.VarChar(255)
  users  users   @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([userid])
}

model names {
  race   String @db.VarChar(255)
  gender String @db.VarChar(255)
  name   String @db.VarChar(255)

  @@unique([name, gender, race], map: "names_name_gender_race_idx")
}

model npcgeneratorblacklist {
  objectid Int
  userid   Int
  objects  objects @relation(fields: [objectid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users    users   @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([objectid, userid])
  @@index([userid])
}

model objects {
  id                    Int                     @id @default(autoincrement())
  type                  Int
  name                  String                  @db.VarChar(255)
  game                  Int
  userid                Int
  created               DateTime?               @default(now()) @db.Timestamp(6)
  lastedited            DateTime?               @default(now()) @db.Timestamp(6)
  object                Json
  originalid            Int?
  originaluserid        Int?
  folderid              Int?
  trashed               Int?                    @default(0) @db.SmallInt
  variantof             Int?
  oldid                 Int?
  actionsdetails        actionsdetails?
  actionstags           actionstags[]
  backgroundsdetails    backgroundsdetails?
  charactersdetails     charactersdetails?
  classesdetails        classesdetails?
  npcgeneratorblacklist npcgeneratorblacklist[]
  folders               folders?                @relation(fields: [folderid], references: [id], onUpdate: NoAction)
  objecttypes           objecttypes             @relation(fields: [type], references: [type], onDelete: NoAction, onUpdate: NoAction)
  users                 users                   @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  objects               objects?                @relation("objectsToobjects", fields: [variantof], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_objects         objects[]               @relation("objectsToobjects")
  publications          publications?
  racesdetails          racesdetails?
  templatesdetails      templatesdetails?

  @@index([folderid])
  @@index([id])
  @@index([type])
  @@index([userid])
  @@index([variantof])
}

model objecttypes {
  type         Int            @id
  name         String         @db.VarChar(255)
  objects      objects[]
  publications publications[]
}

model publications {
  objectid                 Int                        @id
  type                     Int
  oldid                    Int
  oldtype                  String                     @db.VarChar(255)
  datepublished            DateTime?                  @default(now()) @db.Timestamp(6)
  datemodified             DateTime?                  @default(now()) @db.Timestamp(6)
  adds                     Int?                       @default(0)
  url                      String                     @db.VarChar(255)
  objects                  objects                    @relation(fields: [objectid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  objecttypes              objecttypes                @relation(fields: [type], references: [type], onDelete: NoAction, onUpdate: NoAction)
  publicationsenvironments publicationsenvironments[]
  publicationsratings      publicationsratings[]
  publicationssearchtags   publicationssearchtags[]
  publicationssubtypes     publicationssubtypes[]
  reports                  reports[]

  @@index([objectid])
  @@index([type])
}

model publicationsenvironments {
  objectid     Int
  string       String       @db.VarChar(255)
  publications publications @relation(fields: [objectid], references: [objectid], onDelete: Cascade, onUpdate: NoAction)

  @@id([objectid, string])
  @@index([objectid])
}

model publicationsratings {
  objectid     Int
  userid       Int
  value        Int
  publications publications @relation(fields: [objectid], references: [objectid], onDelete: Cascade, onUpdate: NoAction)
  users        users        @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([objectid, userid])
  @@index([objectid])
  @@index([userid])
}

model publicationssearchtags {
  objectid     Int
  string       String       @db.VarChar(255)
  publications publications @relation(fields: [objectid], references: [objectid], onDelete: Cascade, onUpdate: NoAction)

  @@id([objectid, string])
  @@index([objectid])
}

model publicationssubtypes {
  objectid     Int
  string       String       @db.VarChar(255)
  publications publications @relation(fields: [objectid], references: [objectid], onDelete: Cascade, onUpdate: NoAction)

  @@id([objectid, string])
  @@index([objectid])
}

model quirks {
  id    Int    @unique(map: "quirks_id_idx") @default(autoincrement())
  quirk String @db.VarChar(255)
}

model racesdetails {
  objectid    Int     @id
  name        String  @db.VarChar(255)
  femalename  String  @db.VarChar(255)
  age         String  @db.VarChar(255)
  description String?
  objects     objects @relation(fields: [objectid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model reports {
  id                             Int          @id @default(autoincrement())
  objectid                       Int
  userid                         Int
  reason                         String       @db.VarChar(255)
  report                         String?
  datereported                   DateTime?    @default(now()) @db.Timestamp(6)
  dateaction                     DateTime?    @db.Timestamp(6)
  moderator                      Int?
  action                         String?
  users_reports_moderatorTousers users?       @relation("reports_moderatorTousers", fields: [moderator], references: [id], onDelete: Cascade, onUpdate: NoAction)
  publications                   publications @relation(fields: [objectid], references: [objectid], onDelete: Cascade, onUpdate: NoAction)
  users_reports_useridTousers    users        @relation("reports_useridTousers", fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([moderator])
  @@index([objectid])
  @@index([userid])
}

model skills {
  id                     Int    @unique(map: "skills_id_idx") @default(autoincrement())
  name                   String @db.VarChar(255)
  game                   Int
  userid                 Int
  game_skills_gameTogame game   @relation("skills_gameTogame", fields: [game], references: [game], onDelete: NoAction, onUpdate: NoAction)
  users                  users  @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([game])
  @@index([userid])
}

model surnames {
  race    String @db.VarChar(255)
  gender  String @db.VarChar(255)
  surname String @db.VarChar(255)

  @@unique([surname, gender, race], map: "surnames_surname_gender_race_idx")
}

model templatesdetails {
  objectid    Int     @id
  name        String  @db.VarChar(255)
  femalename  String  @db.VarChar(255)
  age         String  @db.VarChar(255)
  description String?
  objects     objects @relation(fields: [objectid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model traits {
  name        String  @id @db.VarChar(255)
  type        String  @db.VarChar(255)
  subtitle    Int?    @default(0) @db.SmallInt
  category    String  @db.VarChar(255)
  feeling     Int?    @default(0) @db.SmallInt
  description String?
}

model users {
  id                               Int                     @id @default(autoincrement())
  email                            String                  @unique(map: "users_email_idx") @db.VarChar(255)
  username                         String                  @db.VarChar(32)
  password                         String                  @db.VarChar(255)
  token                            String?                 @db.VarChar(255)
  tokenpwd                         String?                 @db.VarChar(255)
  verified                         Int?                    @default(0) @db.SmallInt
  premium                          DateTime?               @db.Timestamp(6)
  level                            Int?                    @default(0) @db.SmallInt
  created                          DateTime?               @default(now()) @db.Timestamp(6)
  publishsuspension                DateTime?               @db.Timestamp(6)
  sessiontoken                     String?                 @db.VarChar(255)
  name                             String?                 @db.VarChar(255)
  country                          String?                 @db.VarChar(255)
  street                           String?                 @db.VarChar(255)
  city                             String?                 @db.VarChar(255)
  zipcode                          String?                 @db.VarChar(255)
  phone                            String?                 @db.VarChar(255)
  subscriptionstatus               String?                 @db.VarChar(255)
  subscriptionmethod               String?                 @db.VarChar(255)
  customerid                       String?                 @db.VarChar(255)
  subscriptionid                   String?                 @db.VarChar(255)
  avatar                           String?                 @db.VarChar(255)
  damagetypes                      damagetypes[]
  folders                          folders[]
  languages                        languages[]
  npcgeneratorblacklist            npcgeneratorblacklist[]
  objects                          objects[]
  publicationsratings              publicationsratings[]
  reports_reports_moderatorTousers reports[]               @relation("reports_moderatorTousers")
  reports_reports_useridTousers    reports[]               @relation("reports_useridTousers")
  skills                           skills[]

  @@unique([id, email], map: "users_id_email_idx")
}

model voices {
  id         Int     @id @default(autoincrement())
  gender     String  @db.VarChar(255)
  person     String  @db.VarChar(255)
  character  String? @db.VarChar(255)
  production String? @db.VarChar(255)
  filename   String  @db.VarChar(255)
}

model backgroundsdetails {
  objectid    Int     @id
  name        String  @db.VarChar(255)
  femalename  String  @db.VarChar(255)
  age         String  @db.VarChar(255)
  description String?
  objects     objects @relation(fields: [objectid], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([objectid])
}

model characterhooks {
  id   Int    @unique(map: "characterhooks_id_idx") @default(autoincrement())
  hook String @db.VarChar(255)
}
