generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model actions {
  id         Int          @id @default(autoincrement())
  userid     Int
  name       String       @db.VarChar(255)
  type       String       @db.VarChar(255)
  subtype    String?      @db.VarChar(255)
  source     String       @db.VarChar(255)
  object     Json
  users      users        @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "actions_ibfk_1")
  actiontags actiontags[]

  @@index([userid], map: "userid")
}

model actiontags {
  actionid Int
  tag      String  @db.VarChar(255)
  actions  actions @relation(fields: [actionid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "actiontags_ibfk_1")

  @@id([actionid, tag])
}

model armor {
  id     Int    @id @default(autoincrement())
  userid Int
  name   String @db.VarChar(255)
  object Json
  users  users  @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "armor_ibfk_1")

  @@index([userid], map: "userid")
}

model backgrounds {
  id         Int    @unique(map: "id") @default(autoincrement())
  background String @db.VarChar(255)
}

model bases {
  id    Int    @unique(map: "id") @default(autoincrement())
  age   String @db.VarChar(255)
  part  String @db.VarChar(255)
  value String @db.VarChar(255)
}

model characters {
  id             Int       @id @default(autoincrement())
  userid         Int
  game           String    @db.VarChar(255)
  created        DateTime? @default(now()) @db.DateTime(0)
  lastedited     DateTime? @default(now()) @db.DateTime(0)
  folderid       Int?
  object         Json
  trashed        Boolean?  @default(false)
  originalid     Int?
  originaluserid Int?
  folders        folders?  @relation(fields: [folderid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "characters_ibfk_1")
  users          users     @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "characters_ibfk_2")

  @@index([folderid], map: "folderid")
  @@index([userid], map: "userid")
}

model classes {
  id             Int             @id @default(autoincrement())
  userid         Int
  game           String          @db.VarChar(255)
  object         Json
  created        DateTime?       @default(now()) @db.DateTime(0)
  lastedited     DateTime?       @default(now()) @db.DateTime(0)
  folderid       Int?
  trashed        Boolean?        @default(false)
  originaluserid Int?
  originalid     Int?
  folders        folders?        @relation(fields: [folderid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classes_ibfk_1")
  users          users           @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classes_ibfk_2")
  classvariants  classvariants[]

  @@index([folderid], map: "folderid")
  @@index([userid], map: "userid")
}

model classvariants {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  classid    Int
  object     Json
  created    DateTime? @default(now()) @db.DateTime(0)
  lastedited DateTime? @default(now()) @db.DateTime(0)
  classes    classes   @relation(fields: [classid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "classvariants_ibfk_1")

  @@index([classid], map: "classid")
}

model damagetypes {
  id          Int     @id @default(autoincrement())
  userid      Int
  name        String  @db.VarChar(255)
  description String? @db.Text
  users       users   @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "damagetypes_ibfk_1")

  @@index([userid], map: "userid")
}

model folders {
  id            Int          @id @default(autoincrement())
  userid        Int
  created       DateTime?    @default(now()) @db.DateTime(0)
  lastedited    DateTime?    @default(now()) @db.DateTime(0)
  folderid      Int?
  name          String       @db.VarChar(255)
  trashed       Boolean?     @default(false)
  characters    characters[]
  classes       classes[]
  folders       folders?     @relation("foldersTofolders", fields: [folderid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "folders_ibfk_1")
  other_folders folders[]    @relation("foldersTofolders")
  users         users        @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "folders_ibfk_2")
  races         races[]
  templates     templates[]

  @@index([folderid], map: "folderid")
  @@index([userid], map: "userid")
}

model languages {
  id     Int     @id @default(autoincrement())
  userid Int
  name   String  @db.VarChar(255)
  script String? @db.VarChar(255)
  users  users   @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "languages_ibfk_1")

  @@index([userid], map: "userid")
}

model names {
  race   String @db.VarChar(255)
  gender String @db.VarChar(255)
  name   String @db.VarChar(255)

  @@unique([name, gender, race], map: "id")
}

model professions {
  id          Int     @id @default(autoincrement())
  userid      Int
  age         String  @db.VarChar(255)
  name        String  @db.VarChar(255)
  description String? @db.Text
  object      Json
  users       users   @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "professions_ibfk_1")

  @@index([userid], map: "userid")
}

model publications {
  id                       Int
  type                     String                     @db.VarChar(255)
  datepublished            DateTime?                  @default(now()) @db.DateTime(0)
  datemodified             DateTime?                  @default(now()) @db.DateTime(0)
  name                     String                     @db.VarChar(255)
  monstertype              Int?
  cr                       Float?                     @db.Float
  size                     Int?
  alignment                Int?
  adds                     Int?                       @default(0)
  url                      String                     @db.VarChar(255)
  meta                     String?                    @db.VarChar(255)
  publicationsenvironments publicationsenvironments[]
  publicationsratings      publicationsratings[]
  publicationssearchtags   publicationssearchtags[]
  publicationssubtypes     publicationssubtypes[]

  @@id([id, type])
  @@unique([id, type], map: "id")
}

model publicationsenvironments {
  id           Int
  type         String       @db.VarChar(255)
  string       String       @db.VarChar(255)
  publications publications @relation(fields: [id, type], references: [id, type], onDelete: Cascade, onUpdate: NoAction, map: "publicationsenvironments_ibfk_1")

  @@id([id, type, string])
}

model publicationsratings {
  id           Int
  type         String       @db.VarChar(255)
  userid       Int
  value        Int
  publications publications @relation(fields: [id, type], references: [id, type], onDelete: Cascade, onUpdate: NoAction, map: "publicationsratings_ibfk_1")
  users        users        @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "publicationsratings_ibfk_2")

  @@id([id, type, userid])
  @@index([userid], map: "userid")
}

model publicationssearchtags {
  id           Int
  type         String       @db.VarChar(255)
  string       String       @db.VarChar(255)
  publications publications @relation(fields: [id, type], references: [id, type], onDelete: Cascade, onUpdate: NoAction, map: "publicationssearchtags_ibfk_1")

  @@id([id, type, string])
}

model publicationssubtypes {
  id           Int
  type         String       @db.VarChar(255)
  string       String       @db.VarChar(255)
  publications publications @relation(fields: [id, type], references: [id, type], onDelete: Cascade, onUpdate: NoAction, map: "publicationssubtypes_ibfk_1")

  @@id([id, type, string])
}

model quirks {
  id    Int    @unique(map: "id") @default(autoincrement())
  quirk String @db.VarChar(255)
}

model races {
  id             Int            @id @default(autoincrement())
  userid         Int
  game           String         @db.VarChar(255)
  nameType       String?        @default("human") @db.VarChar(255)
  object         Json
  created        DateTime?      @default(now()) @db.DateTime(0)
  lastedited     DateTime?      @default(now()) @db.DateTime(0)
  folderid       Int?
  trashed        Boolean?       @default(false)
  originalid     Int?
  originaluserid Int?
  folders        folders?       @relation(fields: [folderid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "races_ibfk_1")
  users          users          @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "races_ibfk_2")
  racevariants   racevariants[]

  @@index([folderid], map: "folderid")
  @@index([userid], map: "userid")
}

model racevariants {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  raceid     Int
  object     Json
  created    DateTime? @default(now()) @db.DateTime(0)
  lastedited DateTime? @default(now()) @db.DateTime(0)
  races      races     @relation(fields: [raceid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "racevariants_ibfk_1")

  @@index([raceid], map: "raceid")
}

model reports {
  reportid     Int       @id @default(autoincrement())
  id           Int
  type         String    @db.VarChar(255)
  userid       Int
  reason       String    @db.VarChar(255)
  report       String?   @db.Text
  datereported DateTime? @default(now()) @db.DateTime(0)
  dateaction   DateTime? @db.DateTime(0)
  moderator    Int?
  action       String?   @db.Text
  users        users     @relation(fields: [userid], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "reports_ibfk_1")

  @@index([userid], map: "userid")
}

model skills {
  id   Int    @unique(map: "id") @default(autoincrement())
  game String @db.VarChar(255)
  name String @db.VarChar(255)
}

model spells {
  id     Int    @id @default(autoincrement())
  userid Int
  name   String @db.VarChar(255)
  object Json
  users  users  @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "spells_ibfk_1")

  @@index([userid], map: "userid")
}

model surnames {
  race    String @db.VarChar(255)
  gender  String @db.VarChar(255)
  surname String @db.VarChar(255)

  @@unique([surname, gender, race], map: "id")
}

model templates {
  id             Int       @id @default(autoincrement())
  userid         Int
  game           String    @db.VarChar(255)
  object         Json
  created        DateTime? @default(now()) @db.DateTime(0)
  lastedited     DateTime? @default(now()) @db.DateTime(0)
  folderid       Int?
  trashed        Boolean?  @default(false)
  originalid     Int?
  originaluserid Int?
  folders        folders?  @relation(fields: [folderid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "templates_ibfk_1")
  users          users     @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "templates_ibfk_2")

  @@index([folderid], map: "folderid")
  @@index([userid], map: "userid")
}

model traits {
  name        String   @id @db.VarChar(255)
  type        String   @db.VarChar(255)
  subtitle    Boolean? @default(false)
  category    String   @db.VarChar(255)
  feeling     Boolean? @default(false)
  description String?  @db.Text
}

model users {
  id                  Int                   @id @default(autoincrement())
  email               String                @unique(map: "email") @db.VarChar(255)
  username            String                @db.VarChar(32)
  password            String                @db.VarChar(255)
  token               String?               @db.VarChar(255)
  tokenpwd            String?               @db.VarChar(255)
  verified            Int?                  @default(0) @db.TinyInt
  premium             DateTime?             @db.DateTime(0)
  level               Int?                  @default(0) @db.TinyInt
  created             DateTime?             @default(now()) @db.DateTime(0)
  publishsuspension   DateTime?             @db.DateTime(0)
  sessiontoken        String?               @db.VarChar(255)
  name                String?               @db.VarChar(255)
  country             String?               @db.VarChar(255)
  street              String?               @db.VarChar(255)
  city                String?               @db.VarChar(255)
  zipcode             String?               @db.VarChar(255)
  phone               String?               @db.VarChar(255)
  subscriptionstatus  String?               @db.VarChar(255)
  subscriptionmethod  String?               @db.VarChar(255)
  customerid          String?               @db.VarChar(255)
  subscriptionid      String?               @db.VarChar(255)
  actions             actions[]
  armor               armor[]
  characters          characters[]
  classes             classes[]
  damagetypes         damagetypes[]
  folders             folders[]
  languages           languages[]
  professions         professions[]
  publicationsratings publicationsratings[]
  races               races[]
  reports             reports[]
  spells              spells[]
  templates           templates[]
  weapons             weapons[]

  @@unique([id, email], map: "idemail")
}

model voices {
  voice String @id @db.VarChar(255)
}

model weapons {
  id     Int    @id @default(autoincrement())
  userid Int
  name   String @db.VarChar(255)
  object Json
  users  users  @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "weapons_ibfk_1")

  @@index([userid], map: "userid")
}
